import matplotlib as mpl
mpl.use('Agg')
import matplotlib.pyplot as plt
import pandas as pd
import os
import numpy as np
from matplotlib.gridspec import GridSpec
from scipy.stats import spearmanr
import subprocess
import matplotlib.gridspec as gridspec
import matplotlib as mpl
import re

"""
For samples with WES available, goes back to the sam files generated by polysolver and calculates the median depth. 
Then compares it to the depth from hla panel.
Swimmers plot

Uses "/groups/wyattgrp/users/amunzur/hla_pipeline/results/metrics/compiled_depth/hla_allele_specific_depth.tsv"
"""

panel_depth_path="/groups/wyattgrp/users/amunzur/hla_pipeline/results/metrics/compiled_depth/hla_allele_specific_depth.tsv"
dir_polysolver="/groups/wyattgrp/users/amunzur/hla_pipeline/results/polysolver/hla_types/"
path_info="/groups/wyattgrp/users/amunzur/hla_pipeline/resources/sample_list_panel_test.tsv"
dir_figures="/groups/wyattgrp/users/amunzur/hla_pipeline/results/figures/coverage_analysis"

panel_depth=pd.read_csv(panel_depth_path, sep="\t")
panel_depth=panel_depth[panel_depth["Sample_name"].str.contains("WBC")]
sample_info=pd.read_csv(path_info, sep="\t")
wbc_samples=sample_info["WBC_name"].drop_duplicates().tolist()

def calculate_median_depth_from_polysolver_sam(path_sam):
    """
    Given path to polsolver bam calculates median depth.
    """
    if os.path.exists(path_sam):
        depth_path=path_sam.replace(".bam", ".depth")
        subprocess.run(f"/home/amunzur/anaconda3/envs/snakemake/bin/samtools index {path_sam}", shell=True, check=True)
        subprocess.run(f"/home/amunzur/anaconda3/envs/snakemake/bin/samtools depth a -d0 -g {path_sam} > {depth_path}", shell=True, check=True)
        depth_df=pd.read_csv(depth_path, sep="\t", header=None)
        depth=depth_df[2].median()
    else:
        depth=np.nan
    
    return(depth)

def return_depth_hla_types_for_samples(wbc_samples_list):
    """
    Given a list of samples returns their HLA type.
    They must all be WBC samples.
    """
    dir_polysolver_main="/groups/wyattgrp/users/amunzur/hla_pipeline/results/polysolver/hla_types/"
    
    sample_dict={}
    for wbc in wbc_samples_list:
        dir_polysolver=os.path.join(dir_polysolver_main, wbc)
        path_winners=os.path.join(dir_polysolver, "winners.hla.txt")
        if os.path.exists(path_winners):
            winners=pd.read_csv(path_winners, sep="\t", header=None).T
            winners.columns = winners.iloc[0]  # Set the first row as header
            winners = winners[1:].reset_index(drop=True)
            alleles=set(pd.concat([winners["HLA-A"], winners["HLA-B"], winners["HLA-C"]]).tolist())

            alleles_dict={}
            for allele in alleles:
                path_sam=os.path.join(dir_polysolver, "temp."+allele+".bam")
                depth=calculate_median_depth_from_polysolver_sam(path_sam)
                alleles_dict[allele]=depth
            sample_dict[wes_sample_wbc]=alleles_dict
    return(sample_dict)

path_info="/groups/wyattgrp/users/amunzur/hla_pipeline/resources/sample_list_panel_test.tsv"
sample_info=pd.read_csv(path_info, sep="\t")
wbc_samples=sample_info["WBC_name"].drop_duplicates().tolist()
depth_dict=return_depth_hla_types_for_samples(wbc_samples)

# PLOTTING DEPTH
# Initialize figure and GridSpec
fig, axes = plt.subplots(3, 1, figsize=(8, 5), sharex=True)
hla_genes = ["hla_a", "hla_b", "hla_c"]

samples = list(wes_sample_dict.keys())
x_positions = np.arange(len(samples))  # One x-tick per sample

# Iterate over HLA genes
for i, gene in enumerate(hla_genes):
    ax = axes[i]
    gene_depths = []  # Depths of all alleles for this gene across samples
    gene_labels = []  # Allele labels
    
    for sample in samples:
        # Filter alleles for the current gene
        alleles = {
            k: v for k, v in wes_sample_dict[sample].items() if k.startswith(gene)
        }
        if len(alleles) == 1:
            gene_depths.append([list(alleles.values())[0]])
            gene_labels.append(list(alleles.keys())[0])
        elif len(alleles) > 1:
            gene_depths.append(list(alleles.values()))
            gene_labels.extend(alleles.keys())
        else:
            gene_depths.append([])
    
    # Normalize bar width based on max alleles per sample
    max_alleles = max(len(depth) for depth in gene_depths)
    bar_width = 0.8 / max_alleles if max_alleles > 0 else 0.8
    
    # Plot bars for each sample
    for j, depths in enumerate(gene_depths):
        if len(depths) == 1:  # One allele case
            # Plot the single bar
            ax.bar(x_positions[j], depths[0],width=bar_width, color="darkorange",edgecolor="None")
            # Add a cross marker where the missing bar would be
            ax.plot(x_positions[j], depths[0]/2, marker='*', markersize=10, color='black', label="Missing allele" if j == 0 else "")
        elif len(depths) > 1:  # Multiple alleles case
            for k, depth in enumerate(depths):
                ax.bar(x_positions[j] + k * bar_width - (len(depths) - 1) * bar_width / 2,depth/2,width=bar_width,color="darkorange",edgecolor="None")
    
    # Formatting
    ax.set_title(gene.upper(), loc="left")
    ax.set_ylabel("Raw mean depth")
    ax.set_ylim(0, 1)
    ax.set_yticks([0, 0.5, 1])
    ax.set_yticklabels(["0", "0.5", "1",])
    ax.spines[['top', 'right']].set_visible(False)
    if i == len(hla_genes) - 1:
        ax.set_xticks(x_positions)
        ax.set_xticklabels([re.sub(r'(?<=WBC).*', '', s) for s in samples], rotation=45, ha="right")

fig.tight_layout()
fig.suptitle("Mean depth from Polysolver bams. Star means homozygous")
fig.savefig(os.path.join(dir_figures, f"wes_median_depth.png"))
fig.savefig(os.path.join(dir_figures, f"wes_median_depth.pdf"))