import matplotlib as mpl
mpl.use('Agg')
import matplotlib.pyplot as plt
import pandas as pd
import os
from matplotlib.gridspec import GridSpec
from scipy.stats import spearmanr

"""
Makes various plots to see if panel worked.
Uses "/groups/wyattgrp/users/amunzur/hla_pipeline/results/metrics/compiled_depth/hla_allele_specific_depth.tsv" file.
Script calculate_hla_allele_specific_depth.py makes this file ^.
Saves to "/groups/wyattgrp/users/amunzur/hla_pipeline/results/figures/coverage_analysis"
"""

def compare_depth_between_hla_alleles(hla_allele_specific_depth_file, color_dict, gene, ax, subset_sample_type=None, scatter_size=10, add_legend=True):
    """
    hla_allele_specific_depth_file is generated by the calculate_hla_allele_specific_depth.py file.
    Provide gene in this format: hla_a, hla_b, hla_c. Case unimportant.
    """
    df=pd.read_csv(hla_allele_specific_depth_file, sep="\t")
    gene=gene.lower()
    df["Gene"] = df["allele"].str.extract(fr"({gene})", expand=False)
    df=df[~df["Gene"].isna()]
    df["Sample_type"]=df["Sample_name"].str.extract(r"(cfDNA|WBC|FiT)", expand=False)
    df["color"]=df["Sample_type"].map(color_dict)
    
    if subset_sample_type is not None:
        df=df[df["Sample_type"]==subset_sample_type]
    
    allele1_depths = []
    allele2_depths = []
    for i, group in df.groupby("Sample_name"):
        if group.shape[0]==2:
            color=group["color"].unique()
            sample_type=group
            alele1_depth=group["depth"].tolist()[0]
            alele2_depth=group["depth"].tolist()[1]
            ax.scatter(alele1_depth, alele2_depth, edgecolor="None", s=scatter_size, color=color)
            
            allele1_depths.append(alele1_depth)
            allele2_depths.append(alele2_depth)
    
    ax_title=gene.upper().replace("_", " ")
    ax.set_title(ax_title)
    ax.set_xlabel("Allele 1 depth")
    ax.set_ylabel("Allele 2 depth")
    ax.spines['top'].set_visible(False)
    ax.spines['right'].set_visible(False)
    ax.set_aspect('equal')
    ax.set_ylim((0, 3600))
    ax.set_xlim((0, 3600))
    ax.set_yticks([0, 1000, 2000, 3000])
    ax.set_xticks([0, 1000, 2000, 3000])
    ax.set_yticklabels(["0", "1000", "2000", "3000"])
    ax.set_xticklabels(["0", "1000", "2000", "3000"])
    
    # Calculate Spearman's correlation
    if allele1_depths and allele2_depths:
        spearman_corr, _ = spearmanr(allele1_depths, allele2_depths)
        ax.text(0.95, 0.1, f"Spearman's r: {spearman_corr:.2f}", transform=ax.transAxes, ha='right', va='top', fontsize=10, bbox=dict(boxstyle="round", facecolor="white", edgecolor="none"))
    
    if add_legend:
        if subset_sample_type is None:
            legend_colors = color_dict.values()
            legend_labels = color_dict.keys()
        else:
            legend_colors = [color_dict[subset_sample_type]]
            legend_labels = [subset_sample_type]
        
        legend_handles = [plt.Line2D([0], [0], marker='o', color=color, label=label, markersize=4, linestyle='') for color, label in zip(legend_colors, legend_labels)]
        ax.legend(handles=legend_handles, loc="upper left", frameon=False, fontsize = 8, handlelength=2, handletextpad=0.1)
    return(ax)


# FIGURE 1. 
color_dict={"cfDNA": "orangered", "FiT": "deepskyblue", "WBC": "limegreen"}
hla_allele_specific_depth_file="/groups/wyattgrp/users/amunzur/hla_pipeline/results/metrics/compiled_depth/hla_allele_specific_depth.tsv"
dir_figures="/groups/wyattgrp/users/amunzur/hla_pipeline/results/figures/coverage_analysis"

fig = plt.figure(figsize=(8, 4))
fig.suptitle("Comparing depth between alleles to investigate any imbalances. Ideally there will be a positive correlation.")
gs = GridSpec(1, 3, figure=fig)

ax_hla_a = fig.add_subplot(gs[0])
ax_hla_b = fig.add_subplot(gs[1])
ax_hla_c = fig.add_subplot(gs[2])

ax_hla_a=compare_depth_between_hla_alleles(hla_allele_specific_depth_file, color_dict, gene="hla_a", ax=ax_hla_a)
ax_hla_b=compare_depth_between_hla_alleles(hla_allele_specific_depth_file, color_dict, gene="hla_b", ax=ax_hla_b, add_legend=False)
ax_hla_c=compare_depth_between_hla_alleles(hla_allele_specific_depth_file, color_dict, gene="hla_c", ax=ax_hla_c, add_legend=False)

gs.tight_layout(fig)
fig.savefig(os.path.join(dir_figures, "allele1_vs_allele2_depth.png"))
fig.savefig(os.path.join(dir_figures, "allele1_vs_allele2_depth.pdf"))

####################################################################################
# FIGURE 2. 
fig = plt.figure(figsize=(8, 9))
fig.suptitle("Comparing depth between alleles ")
gs = GridSpec(3, 3, figure=fig) 

for i, sample_type in enumerate(["WBC", "cfDNA", "FiT"]):
    
    ax_hla_a = fig.add_subplot(gs[i, 0])
    ax_hla_b = fig.add_subplot(gs[i, 1])
    ax_hla_c = fig.add_subplot(gs[i, 2])   
    
    ax_hla_a=compare_depth_between_hla_alleles(hla_allele_specific_depth_file, color_dict, gene="hla_a", subset_sample_type=sample_type, scatter_size=15, ax=ax_hla_a)
    ax_hla_b=compare_depth_between_hla_alleles(hla_allele_specific_depth_file, color_dict, gene="hla_b", subset_sample_type=sample_type, scatter_size=15, ax=ax_hla_b, add_legend=False)
    ax_hla_c=compare_depth_between_hla_alleles(hla_allele_specific_depth_file, color_dict, gene="hla_c", subset_sample_type=sample_type, scatter_size=15, ax=ax_hla_c, add_legend=False) 

gs.tight_layout(fig)
fig.savefig(os.path.join(dir_figures, f"separate_allele1_vs_allele2_depth.png"))
fig.savefig(os.path.join(dir_figures, f"separate_allele1_vs_allele2_depth.pdf"))